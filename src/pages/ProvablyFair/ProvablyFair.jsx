import {
    faAngleLeft,
    faCheck,
    faClockRotateLeft, faCode,
    faCrown,
    faGear,
    faPenToSquare, faPlus,
    faShieldHalved
} from '@fortawesome/free-solid-svg-icons'
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import {Link} from "react-router-dom";
import '../../styles/pages/ProvablyFair/provablyfair.scss';
import {Helmet} from "react-helmet";
import {useState} from "react";
import ProvablyFairConfiguration from "./ProvablyFairConfiguration.jsx";
import StatsSection from "../../components/StatsSection.jsx";

function ProvablyFair() {
    const [provablyFairPage, setProvablyFairPage] = useState('configuration');

    return (
        <div className={'provably-fair'}>
            <main>
                <Helmet>
                    <title>Provably Fair Algorithm | GOdrop</title>
                    <meta name="description" content="My page description" />
                </Helmet>
                <div className={'provably-fair-wrapper container content'}>
                    <Link className={'go-back-link'} to={'/'}><FontAwesomeIcon icon={faAngleLeft} /> Go back</Link>
                    <h1 className={'page-header'}><FontAwesomeIcon icon={faShieldHalved} /> Provably Fair</h1>
                    <section className={'provably-fair-definition'}>
                        {/* eslint-disable-next-line react/no-unescaped-entities */}
                        <p>We prioritize fairness and transparency. That's why we have implemented Provably Fair to
                            ensure that every game outcome is unbiased and verifiable.</p>
                        <p>Our cryptographic algorithm generates random numbers and seeds that are
                            used to determine game outcomes. We ensure that there is now way to manipulate Provably Fair
                            algorithm and that all odds of winning on our site are equally random. <b>Every user has the same chance of winning an item.</b></p>
                        <p>Every roll result depends on three values:
                            <ul>
                                <li><dfn>Server Seed</dfn> - random value generated by the server. You can generate a new server seed every 8 hours.</li>
                                <li><dfn>Client Seed</dfn> - random value generated by the user, it can also be set manually by the user.</li>
                                <li><dfn>Nonce</dfn> - unique and incrementing value that resets every time a new server seed is generated.
                                    It guarantees that every roll result will be different.</li>
                            </ul>
                        </p>
                        <p>The result is calculated based on these values immediately prior to the start of each draw,
                            so the player can check the fairness of the draw immediately after opening a case.</p>
                        <p>When opening a case skin float is generated with reversed server seed hash.</p>
                        <p>Secret Salt is an additional value used only in encrypting the public hash.</p>
                        <p>You will receive an encrypted server seed hash before opening a case. The initial and final hash
                            values will be identical, which will prove that the website has no influence on the final results of the draw.</p>
                    </section>
                    <section className={'provably-fair-options'}>
                        <div className="section-header">
                            <h2 className={provablyFairPage === 'configuration' ? 'active' : ''}
                                onClick={() => setProvablyFairPage('configuration')}><FontAwesomeIcon icon={faGear} /> Configuration</h2>
                            <h2 className={provablyFairPage === 'verify' ? 'active' : ''}
                                onClick={() => setProvablyFairPage('verify')}><FontAwesomeIcon icon={faCheck} /> Verify Roll</h2>
                            <h2 className={provablyFairPage === 'algorithm' ? 'active' : ''}
                                onClick={() => setProvablyFairPage('algorithm')}><FontAwesomeIcon icon={faCode} /> Algorithm</h2>
                        </div>
                        {
                            provablyFairPage === 'configuration' &&
                            <ProvablyFairConfiguration/>
                        }
                    </section>
                </div>
                <StatsSection/>
            </main>
        </div>
    );
}

export default ProvablyFair;